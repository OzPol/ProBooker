// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  email          String    @unique
  name           String?
  profilePicture String?
  userType       UserType
  services       Service[] // Relation to services offered by the provider
  bookings       Booking[] // Relation to bookings made by the user
  reviews        Review[]  // Relation to reviews made by the user
  messagesSent   Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  provider    User     @relation(fields: [providerId], references: [id])
  providerId  Int
  zipcode     String?
  city        String?
  state       String?
  country     String?
  category    String?
  rating      Float?
  availability Availability[]
  bookings    Booking[]
}
model Service {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  provider    User     @relation(fields: [providerId], references: [id])
  providerId  Int
  zipcode     String?
  city        String?
  state       String?
  country     String?
  category    String?
  rating      Float?
  unavailability UnAvailability[]
  bookings    Booking[]
}
model Booking {
  id         Int      @id @default(autoincrement())
  consumer   User     @relation(fields: [consumerId], references: [id])
  consumerId Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  date       DateTime
  status     BookingStatus
}
model Review {
  id          Int      @id @default(autoincrement())
  rating      Int
  comment     String
  consumer    User     @relation(fields: [consumerId], references: [id])
  consumerId  Int
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int
  createdAt   DateTime @default(now())
}
model UnAvailability {
  //date or time that service is not available
  id         Int       @id @default(autoincrement())
  service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  Int
  dayOfWeek  Int
  startTime  DateTime
  endTime    DateTime
}

enum UserType {
  ADMIN
  CONSUMER
  SERVICE_PROVIDER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

